[<][[table]]import * as ko from "knockout";
import * as mapper from "knockout.mapping";
import * as $ from "jquery";
import * as moment from "moment";
import axios from "axios";
import 'datatables.net';
import "Handlers";
import 'chosen-js';
import { contains } from "Utilities";

declare var user: IUser;
declare var window: any;
declare var vm: any;

export default class [[table.name]] {
    Table: DataTables.Api;
    SelectedId: KnockoutObservable<number>;

    [[column int]]New[[column.name]] : KnockoutObservable<number>;
    [[/column int]][[column nvarchar]]New[[column.name]] : KnockoutObservable<string>;
    [[/column nvarchar]][[column varchar]]New[[column.name]] : KnockoutObservable<string>;
    [[/column varchar]][[column bit]]New[[column.name]] : KnockoutObservable<boolean>;
    [[/column bit]][[column datetime]]New[[column.name]] : KnockoutObservable<string>;
    [[/column datetime]][[column float]]New[[column.name]] : KnockoutObservable<number>;
    [[/column float]][[column datetimeoffset]]New[[column.name]] : KnockoutObservable<number>;
    [[/column datetimeoffset]][[column varbinary]]New[[column.name]] : KnockoutObservable<number[]>;
    [[/column varbinary]][[column decimal]]New[[column.name]] : KnockoutObservable<number[]>;
    [[/column decimal]]

    Display: KnockoutObservable<boolean>;
    MsgHeader: KnockoutObservable<string>;
    ViewState: KnockoutObservable<string>;


    constructor() {

        let that = this;

        this.Table = $('#_[[table.name]]').DataTable({
            ajax: {
                url: '/api/[[table.name]]',
                dataSrc: ''
            },
            order: [],
            language: {
                "url": "/Content/WP/js/lang.es_MX.js"
            },
            columns: [
                [[column]]{ data: "[[column.name]]" },
                [[/column]]
            ]

        });
        $('#[[table.name]]').removeClass('display').addClass('table table-striped table-hover table-bordered table-condensed');

        this.SelectedId = ko.observable(0);

        [[column int]]this.New[[column.name]] = ko.observable(0);
        [[/column int]][[column nvarchar]]this.New[[column.name]] = ko.observable('');
        [[/column nvarchar]][[column varchar]]this.New[[column.name]] = ko.observable('');
        [[/column varchar]][[column bit]]this.New[[column.name]] = ko.observable(false);
        [[/column bit]][[column datetime]]this.New[[column.name]] = ko.observable('');
        [[/column datetime]][[column float]]this.New[[column.name]] = ko.observable(0);
        [[/column float]][[column datetimeoffset]]this.New[[column.name]] = ko.observable(0);
        [[/column datetimeoffset]][[column varbinary]]this.New[[column.name]] = ko.observable([]);
        [[/column varbinary]][[column decimal]]this.New[[column.name]] = ko.observable(0);
        [[/column decimal]]
        this.Display = ko.observable(false);
        this.MsgHeader = ko.observable('');
        this.ViewState = ko.observable('Read');


        let vm = window.vm;
        window.vm = this;

        ko.applyBindings(this, $("#main")[0]);

        let thot:[[table.name]] = this;
        $('#tipoauditorias tbody').on('click', 'tr', function () {
            var data:any = thot.Table.row(this).data();
            thot.SelectedId(data.id);
            [[column]]thot.New[[column.name]](data.[[column.name].[lower]]);
            [[/column]]
            thot.Display(true);
            thot.MsgHeader("Editar [[table.name]]");

        });
    }

    Nuevo() {
        this.Display(true);
        this.ViewState('New');
        this.MsgHeader('Agregar [[table.name]]');
    }

    Editar() {
        this.ViewState('Edit');
    }

    Cancel() {
        this.ViewState('Read');
        this.Display(false);
    }

    Save() {
        if (this.SelectedId() == 0) {
            axios.post("/api/[[table.name]]", {
                [[column]][[column.name]]: this.New[[column.name]](),
                [[/column]]
                CreatedBy: user.name,
                ModifiedBy: user.name,
                Created: new Date ,
                Modified: new Date
            }).then(() => {
                this.Display(false);
                [[column int]]this.New[[column.name]](0);
        [[/column int]][[column nvarchar]]this.New[[column.name]]('');
        [[/column nvarchar]][[column varchar]]this.New[[column.name]]('');
        [[/column varchar]][[column bit]]this.New[[column.name]](false);
        [[/column bit]][[column datetime]]this.New[[column.name]]('');
        [[/column datetime]][[column float]]this.New[[column.name]](0);
        [[/column float]][[column datetimeoffset]]this.New[[column.name]](0);
        [[/column datetimeoffset]][[column varbinary]]this.New[[column.name]]([]);
        [[/column varbinary]][[column decimal]]this.New[[column.name]](0);
        [[/column decimal]]
                this.ViewState('Read');
                this.Reload();

            })
                .catch((error) => { swal("No se pudo agregar el [[table.name]]"); });
        } else {
            axios.put("/api/TipoAuditoria", {
                [[column]][[column.name]]: this.New[[column.name]](),
                [[/column]]
                ModifiedBy: user.name,
                Created: new Date ,
                Modified: new Date
            }).then(() => {
                this.Display(false);
                this.SelectedId(0);
                [[column int]]this.New[[column.name]](0);
        [[/column int]][[column nvarchar]]this.New[[column.name]]('');
        [[/column nvarchar]][[column varchar]]this.New[[column.name]]('');
        [[/column varchar]][[column bit]]this.New[[column.name]](false);
        [[/column bit]][[column datetime]]this.New[[column.name]]('');
        [[/column datetime]][[column float]]this.New[[column.name]](0);
        [[/column float]][[column datetimeoffset]]this.New[[column.name]](0);
        [[/column datetimeoffset]][[column varbinary]]this.New[[column.name]]([]);
        [[/column varbinary]][[column decimal]]this.New[[column.name]](0);
        [[/column decimal]]
                this.Reload();
                this.ViewState('Read');

            })
                .catch(() => { swal("No se pudo actualizar el [[table.name]]"); });
        }
    }
    Delete() {
        axios.delete("/api/[[table.name]]/" + this.SelectedId()).then(() => {
            this.Display(false);
            this.SelectedId(0);
            [[column int]]this.New[[column.name]](0);
        [[/column int]][[column nvarchar]]this.New[[column.name]]('');
        [[/column nvarchar]][[column varchar]]this.New[[column.name]]('');
        [[/column varchar]][[column bit]]this.New[[column.name]](false);
        [[/column bit]][[column datetime]]this.New[[column.name]]('');
        [[/column datetime]][[column float]]this.New[[column.name]](0);
        [[/column float]][[column datetimeoffset]]this.New[[column.name]](0);
        [[/column datetimeoffset]][[column varbinary]]this.New[[column.name]]([]);
        [[/column varbinary]][[column decimal]]this.New[[column.name]](0);
        [[/column decimal]]
            this.Reload();

        })
            .catch(() => { swal("No se pudo eliminar el [[table.name]]"); });
    }

    Reload() {
        this.Table.ajax.url('/api/[[table.name]]/').load();
        this.Table.search('').draw();
    }
}
interface IUser { email: string; name: string; roles: Array<string>; Id: string };[[/table]][>]
