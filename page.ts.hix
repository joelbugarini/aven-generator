[<][[table]]$(document).ready(function () {
    var vm = {};

    vm.Table = $('#[[table.name]]_').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '/[[table.name]]ServerSide/SearchAction',
            type: 'POST'
        },
        scrollX: true,
        order: [],
        columns: [
            [[column].[ignore=Id]]{ data: "[[column.name]]" },
            [[/column]]
        ]
    });
    $('#[[table.name]]_').removeClass('display').addClass('table table-striped table-hover table-condensed');

    vm.SelectedId = ko.observable(0);

    [[column int]]vm.New[[column.name]] = ko.observable(0);
    [[/column int]][[column nchar].[ignore=_Sample]]vm.[[column.name]]Selected = ko.observable(0);
    vm.[[column.name]] = ko.observable([]);
    vm.[[column.name]]Load = ko.computed(() => {
        axios.get('/api/[[column.name]]').then((res) => {
            vm.[[column.name]](res.data);
        });
    }).extend({ async: true });
    vm.[[column.name]]Change = ko.computed(() => {
        vm.[[column.name]]Selected();
    });
    [[/column nchar]][[column varchar]]vm.New[[column.name]] = ko.observable('');
    [[/column varchar]][[column bit]]vm.New[[column.name]] = ko.observable(false);
    [[/column bit]][[column datetime]]vm.New[[column.name]] = ko.observable('');
    [[/column datetime]][[column float]]vm.New[[column.name]] = ko.observable(0);
    [[/column float]][[column datetimeoffset]]vm.New[[column.name]] = ko.observable(0);
    [[/column datetimeoffset]][[column varbinary]]vm.New[[column.name]] = ko.observable([]);
    [[/column varbinary]][[column decimal]]vm.New[[column.name]] = ko.observable(0);
    [[/column decimal]]
    vm.Display = ko.observable(false);
    vm.MsgHeader = ko.observable('');
    vm.ViewState = ko.observable('Read');

    $('#[[table.name]]_ tbody').on('click', 'tr', function () {
        var data = vm.Table.row(this).data();
            axios.get(`/api/[[table.name].[head]]/${data.Id}`)
            .then((res) => {
                vm.SelectedId(res.data.Id);

                [[column int]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column int]][[column nchar]]vm.[[column.name]]Selected(res.data.[[column.name]]Id);
                [[/column nchar]][[column varchar]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column varchar]][[column bit]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column bit]][[column datetime]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column datetime]][[column float]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column float]][[column datetimeoffset]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column datetimeoffset]][[column varbinary]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column varbinary]][[column decimal]]vm.New[[column.name]](res.data.[[column.name]]);
                [[/column decimal]]
                
                vm.ViewState('Read');
                vm.Display(true);
                vm.MsgHeader("[[table.name]] detail");
            })
            .catch(res => console.log(res));
    });

    vm.New = function() {
		vm.Clean();
        vm.Display(true);
        vm.ViewState('New');
        vm.MsgHeader('Add [[table.name]]');
    }

    vm.Edit = function() {
        vm.ViewState('Edit');
    }

    vm.Cancel = function() {
        vm.ViewState('Read');
        vm.Clean();
        vm.Display(false);
    }

    vm.Save = function() {
        if (vm.SelectedId() == 0) {
            axios.post("/api/[[table.name].[head]", {
                 [[column int]][[column.name]]: vm.New[[column.name]](),
                [[/column int]][[column nchar]][[column.name]]Id: vm.[[column.name]]Selected(),
                [[/column nchar]][[column varchar]][[column.name]]: vm.New[[column.name]](),
                [[/column varchar]][[column bit]][[column.name]]: vm.New[[column.name]](),
                [[/column bit]][[column datetime]][[column.name]]: moment(vm.New[[column.name]](), "MM/DD/YYYY").format(),
                [[/column datetime]][[column float]][[column.name]]: vm.New[[column.name]](),
                [[/column float]][[column datetimeoffset]][[column.name]]: vm.New[[column.name]](),
                [[/column datetimeoffset]][[column varbinary]][[column.name]]: vm.New[[column.name]](),
                [[/column varbinary]][[column decimal]][[column.name]]: vm.New[[column.name]](),
                [[/column decimal]]
            }).then(() => {
                vm.Display(false);
                vm.Clean();
                vm.ViewState('Read');
                vm.Reload();

            })
                .catch((error) => { swal("[[table.name]] was not been stored into the database"); });
        } else {
            axios.put("/api/[[table.name].[head]]", {
                [[column int]][[column.name]]: vm.New[[column.name]](),
                [[/column int]][[column nchar]][[column.name]]Id: vm.[[column.name]]Selected(),
                [[/column nchar]][[column varchar]][[column.name]]: vm.New[[column.name]](),
                [[/column varchar]][[column bit]][[column.name]]: vm.New[[column.name]](),
                [[/column bit]][[column datetime]][[column.name]]: moment(vm.New[[column.name]](), "MM/DD/YYYY").format(),
                [[/column datetime]][[column float]][[column.name]]: vm.New[[column.name]](),
                [[/column float]][[column datetimeoffset]][[column.name]]: vm.New[[column.name]](),
                [[/column datetimeoffset]][[column varbinary]][[column.name]]: vm.New[[column.name]](),
                [[/column varbinary]][[column decimal]][[column.name]]: vm.New[[column.name]](),
                [[/column decimal]]
            }).then(() => {
                vm.Display(false);
                vm.Clean();
                vm.Reload();
                vm.ViewState('Read');

            })
                .catch(() => { swal("[[table.name]] was not been stored into the database"); });
        }
    }
    vm.Delete = function() {
        swal({
            title: "Are you sure to delete [[table.name]]?",
            text: "It will be not possible to restore it.",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Delete",
            cancelButtonText: "Cancel",
            closeOnConfirm: true
        },
            () => {
                axios.delete("/api/[[table.name].[head]]/" + vm.SelectedId()).then(() => {
                    vm.Display(false);
                    vm.SelectedId(0);
                    vm.Clean();
                    vm.Reload();

                    }).catch(() => { swal("[[table.name]] was not been stored into the database"); });
            });
    }

    vm.Clean = function(){
        vm.SelectedId(0);
        [[column int]]vm.New[[column.name]](0);
        [[/column int]][[column nchar]]vm.[[column.name]]Selected(0);
        [[/column nchar]][[column varchar]]vm.New[[column.name]]('');
        [[/column varchar]][[column bit]]vm.New[[column.name]](false);
        [[/column bit]][[column datetime]]vm.New[[column.name]]('');
        [[/column datetime]][[column float]]vm.New[[column.name]](0);
        [[/column float]][[column datetimeoffset]]vm.New[[column.name]](0);
        [[/column datetimeoffset]][[column varbinary]]vm.New[[column.name]]([]);
        [[/column varbinary]][[column decimal]]vm.New[[column.name]](0);
        [[/column decimal]]
    }

    vm.Reload = function() {
        vm.Table.ajax.reload();
        vm.Table.search('').draw(false);
    }

     ko.applyBindings(vm, $("#main")[0]);
});[[/table]][>]