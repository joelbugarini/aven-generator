<<RootNode>><<TableNode>>using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ClbDatTitulacion.Common;
using ClbModTitulacion;
using Microsoft.ApplicationBlocks.Data;

namespace ClbDat<<Project.Name>>
{
    public class ClsDat<<Table.Name>>
    {
        /// <summary>
        /// Cadena de conexión a la base de datos.
        /// </summary>
        private string strConnectionString;

        /// <summary>
        /// Constructor de la clase.
        /// </summary>
        public ClsDat<<Table.Name>>()
        {
            this.strConnectionString = DataBaseConnection.Instance.GetConnectionStringTitulacion();
        }

        /// <summary>
        /// Agrega detalle de la solicitud de titulación.
        /// </summary>
        /// <param name="objMod<<Table.Name>>"></param>
        /// <param name="intIdEncSolicitud"></param>
        /// <returns>Objeto con identificador del detalle de la solicitud.</returns>
        public ClsModBase Agregar(ClsMod<<Table.Name>> objMod<<Table.Name>>, int intIdEncSolicitud)
        {
            ClsModBase objModBase = new ClsModBase();

            int intId<<Table.Name>> = 0;

            try
            {
                SqlParameter[] arrParms = new SqlParameter[8];               
                <<ColumnNode>>arrParms[0] = new SqlParameter("@<<Column.Name>>", SqlDbType.<<Column.Type>>){Value = objMod<<Table.Name>>.<<Column.Name>>};
                <<EndColumnNode>>
                object objId = SqlHelper.ExecuteScalar(this.strConnectionString, CommandType.StoredProcedure, "", arrParms);

                if (objId != null)
                {
                    int.TryParse(objId.ToString(), out intId<<Table.Name>>);
                }
                else
                {
                    objModBase.MsgError = "Error al intentar asignar el Id del registro a la variable.";
                    throw new Exception(objModBase.MsgError);
                }
            }
            catch (Exception ex)
            {
                objModBase.MsgError = ex.Message;
            }

            objModBase.Id = intId<<Table.Name>>;
            return objModBase;
        }

    }
}
<<EndTableNode>>
<<EndRootNode>>